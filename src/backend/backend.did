type AssistantMessage = record {
  content : opt text;
  tool_calls : vec ToolCall;
};
type ChatMessage = variant {
  tool : record { content : text; tool_call_id : text };
  user : record { content : text };
  assistant : AssistantMessage;
  system : record { content : text };
};
type FunctionCall = record { name : text; arguments : vec ToolCallArgument };
type NftMetadata = record {
  issued_at : nat64;
  token_id : text;
  owner : principal;
  name : text;
  description : text;
  verification_hash : text;
};
type PromptType = variant { Nod; Blink; SayPhrase };
type ToolCall = record { id : text; function : FunctionCall };
type ToolCallArgument = record { value : text; name : text };
type VerificationChallenge = record {
  id : text;
  prompt_text : text;
  prompt_type : PromptType;
  nonce : text;
};
type VerificationResult = record {
  nft_id : opt text;
  error_message : opt text;
  verification_hash : opt text;
  success : bool;
};
type VerificationSubmission = record {
  behavioral_data : text;
  encrypted_biometric_data : blob;
  mock_data : text;
  challenge_id : text;
  client_timestamp : nat64;
};
type ZkProofMock = record { public_input : text; proof_data : text };
service : {
  chat : (vec ChatMessage) -> (text);
  generate_zk_proof_mock : (text) -> (ZkProofMock);
  get_count : () -> (nat64) query;
  get_nft_metadata : (text) -> (opt NftMetadata) query;
  greet : (text) -> (text) query;
  increment : () -> (nat64);
  prompt : (text) -> (text);
  set_count : (nat64) -> (nat64);
  start_verification_challenge : () -> (VerificationChallenge);
  submit_challenge_result : (VerificationSubmission) -> (VerificationResult);
}
